-module(part1).
-export([run/0]).


% input() -> ["............",
%             "........0...",
%             ".....0......",
%             ".......0....",
%             "....0.......",
%             "......A.....",
%             "............",
%             "............",
%             "........A...",
%             ".........A..",
%             "............",
%             "............"].

input() -> [".....................U.........w..................",
            "l.................................................",
            "...........o.a................U...w...............",
            "............................................W.....",
            "..........T....................s.............7....",
            ".............................................W....",
            ".........T..............4....n.d.H.........5......",
            "......T.....oj...U.....n...w......H...........z...",
            ".G..x..........................E.....V..H.........",
            ".........a....................d....s.......7w.....",
            "...j....r.............o.............V.......d...W.",
            ".......r..J.Goa.U...............n................z",
            ".........Jj.........M..........Pv.................",
            "...J...........t..3..M..............sLV...........",
            "...................t................n.............",
            "....r...........X...........M........v............",
            "...x....t......I......a.PM...............W........",
            "...........1.Bj....I........vO.h.dL...............",
            ".........6....Rr......B...X........h..5v.L..z.....",
            "......1G...........x.....3B.......5...............",
            ".................B....0..........4..E.............",
            ".....................X.....5..h....P....f.....D...",
            ".......1........J.....eK..........................",
            "..................I....R....K...........k.........",
            "......G..................O........................",
            "...........H...9...............K8.P.4..k..E.......",
            "............1....3.............8.F.............f..",
            ".........................4........................",
            ".l...........X............9.......................",
            "....N.................R...t.e.....................",
            "...g............3..R.........e....h.........f.....",
            "...........................e......i...............",
            "................2...I.7..9..O.....s.........k.....",
            "....................6...9E.............F..O.......",
            "........................KN........................",
            ".......g......................Z.........F..f...Y..",
            "...........................A....i.................",
            "...........6g...b........8.......y.....S..........",
            "..l.....6.....m...............8...................",
            "....u..m...b...............p...A..................",
            "..............b.p........................k........",
            "....m......2...........Z..y....i..................",
            "........g2.....b.........i....D..ZF...............",
            "......2.0...........p............N..........A.....",
            "...m.............S...y........A...Z...N...........",
            "..S..l..........................................Y.",
            "........S....0u.................y......DY.........",
            "...........0.........................D............",
            ".................u...................p...Y........",
            ".......u.........................................."].

run() ->
    Input = input(),
    Char_positions = to_char_position_list(with_index_2d(Input)),
    Positions_by_character = dict:to_list(group_by(fun(X) -> element(1, X) end, Char_positions)),
    Combinations = [combinations(Positions) || {_Char, Positions} <- Positions_by_character],
    Flat_list = lists:flatten([antinodes(Combos) || Combos <- Combinations]),
    Nodes_inside = lists:usort(inside_matrix(Flat_list, Input)),
    io:format("~p~n", [length(Nodes_inside)]).

to_char_position_list(List) ->
    lists:flatten([[{Char, {X, Y}} || {X, Char} <- Points] || {Y, Points} <- List]).

with_index_2d(Matrix) -> [{Ix, with_index(Row)} || {Ix, Row} <- with_index(Matrix)].

with_index(List) -> [{Ix, Item} ||
                     {Ix, Item} <- lists:zip(lists:seq(0, length(List) - 1), List),
                     Item =/= $.].

group_by(F, List) ->
    lists:foldl(fun({Key, Value}, Dict) -> dict:append(Key, Value, Dict) end,
                dict:new(),
                [ {F(Item), Item} || Item <- List ]).

combinations(List) ->
    lists:usort([lists:sort([element(2, X), element(2, Y)]) || X <- List, Y <- List, X =/= Y]).

antinodes(List) -> [antinodes(lists:nth(1, Pair), lists:nth(2, Pair)) || Pair <- List].

antinodes({X1, Y1}, {X2, Y2}) -> [{2 * X1 - X2, 2 * Y1 - Y2}, {2 * X2 - X1, 2 * Y2 - Y1}].
    
inside_matrix(Points, Input) ->
    Width = length(lists:nth(1, Input)),
    Height = length(Input),
    [P || P <- Points, element(1, P) >= 0, element(2, P) >= 0, element(1, P) < Width, element(2, P) < Height].
